package urn.ebay.apis.eBLBaseComponents;
import urn.ebay.apis.eBLBaseComponents.AckCodeType;
import java.util.List;
import java.util.ArrayList;
import urn.ebay.apis.eBLBaseComponents.ErrorType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.NamedNodeMap;
import java.io.FileInputStream;
import java.io.StringReader;
import java.io.IOException;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Base type definition of a response payload that can carry
 * any type of payload content with following optional
 * elements: - timestamp of response message, - application
 * level acknowledgement, and - application-level errors and
 * warnings. 
 */
public class AbstractResponseType{


	/**
	 * This value represents the date and time (GMT) when the
	 * response was generated by a service provider (as a result of
	 * processing of a request). 	 
	 */ 
	private String Timestamp;

	/**
	 * Application level acknowledgement code. 	 
	 */ 
	private AckCodeType Ack;

	/**
	 * CorrelationID may be used optionally with an application
	 * level acknowledgement. 	 
	 */ 
	private String CorrelationID;

	/**
	 * 	 
	 */ 
	private List<ErrorType> Errors = new ArrayList<ErrorType>();

	/**
	 * This refers to the version of the response payload schema. 	 
	 */ 
	private String Version;

	/**
	 * This refers to the specific software build that was used in
	 * the deployment for processing the request and generating the
	 * response. 	 
	 */ 
	private String Build;

	

	/**
	 * Default Constructor
	 */
	public AbstractResponseType (){
	}	

	/**
	 * Getter for Timestamp
	 */
	 public String getTimestamp() {
	 	return Timestamp;
	 }
	 
	/**
	 * Setter for Timestamp
	 */
	 public void setTimestamp(String Timestamp) {
	 	this.Timestamp = Timestamp;
	 }
	 
	/**
	 * Getter for Ack
	 */
	 public AckCodeType getAck() {
	 	return Ack;
	 }
	 
	/**
	 * Setter for Ack
	 */
	 public void setAck(AckCodeType Ack) {
	 	this.Ack = Ack;
	 }
	 
	/**
	 * Getter for CorrelationID
	 */
	 public String getCorrelationID() {
	 	return CorrelationID;
	 }
	 
	/**
	 * Setter for CorrelationID
	 */
	 public void setCorrelationID(String CorrelationID) {
	 	this.CorrelationID = CorrelationID;
	 }
	 
	/**
	 * Getter for Errors
	 */
	 public List<ErrorType> getErrors() {
	 	return Errors;
	 }
	 
	/**
	 * Setter for Errors
	 */
	 public void setErrors(List<ErrorType> Errors) {
	 	this.Errors = Errors;
	 }
	 
	/**
	 * Getter for Version
	 */
	 public String getVersion() {
	 	return Version;
	 }
	 
	/**
	 * Setter for Version
	 */
	 public void setVersion(String Version) {
	 	this.Version = Version;
	 }
	 
	/**
	 * Getter for Build
	 */
	 public String getBuild() {
	 	return Build;
	 }
	 
	/**
	 * Setter for Build
	 */
	 public void setBuild(String Build) {
	 	this.Build = Build;
	 }
	 



	private  boolean isWhitespaceNode(Node n) {
		if (n.getNodeType() == Node.TEXT_NODE) {
			String val = n.getNodeValue();
			return val.trim().length() == 0;
		} else if (n.getNodeType() == Node.ELEMENT_NODE ) {
			return (n.getChildNodes().getLength() == 0);
		} else {
			return false;
		}
	}
	
	public AbstractResponseType(Node node) throws XPathExpressionException {
		XPathFactory factory = XPathFactory.newInstance();
		XPath xpath = factory.newXPath();
		Node childNode = null;
		NodeList nodeList = null;
		childNode = (Node) xpath.evaluate("Timestamp", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Timestamp = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("Ack", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Ack = AckCodeType.fromValue(childNode.getTextContent());
		}
		childNode = (Node) xpath.evaluate("CorrelationID", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.CorrelationID = childNode.getTextContent();
		}
	
        nodeList = (NodeList) xpath.evaluate("Errors", node, XPathConstants.NODESET);
		if (nodeList != null && nodeList.getLength() > 0) {
			for(int i=0; i < nodeList.getLength(); i++) {
				Node subNode = nodeList.item(i);
				this.Errors.add(new ErrorType(subNode));
			}
		}
		childNode = (Node) xpath.evaluate("Version", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Version = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("Build", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Build = childNode.getTextContent();
		}
	
	}
 
}
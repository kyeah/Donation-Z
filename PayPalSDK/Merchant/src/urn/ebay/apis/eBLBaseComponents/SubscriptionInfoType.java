package urn.ebay.apis.eBLBaseComponents;
import java.util.List;
import java.util.ArrayList;
import urn.ebay.apis.eBLBaseComponents.SubscriptionTermsType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.NamedNodeMap;
import java.io.FileInputStream;
import java.io.StringReader;
import java.io.IOException;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * SubscriptionInfoType Information about a PayPal
 * Subscription. 
 */
public class SubscriptionInfoType{


	/**
	 * ID generated by PayPal for the subscriber. Character length
	 * and limitations: no limit	 
	 */ 
	private String SubscriptionID;

	/**
	 * Subscription start date 	 
	 */ 
	private String SubscriptionDate;

	/**
	 * Date when the subscription modification will be effective 	 
	 */ 
	private String EffectiveDate;

	/**
	 * Date PayPal will retry a failed subscription payment 	 
	 */ 
	private String RetryTime;

	/**
	 * Username generated by PayPal and given to subscriber to
	 * access the subscription. Character length and limitations:
	 * 64 alphanumeric single-byte characters	 
	 */ 
	private String Username;

	/**
	 * Password generated by PayPal and given to subscriber to
	 * access the subscription. For security, the value of the
	 * password is hashed. Character length and limitations: 128
	 * alphanumeric single-byte characters	 
	 */ 
	private String Password;

	/**
	 * The number of payment installments that will occur at the
	 * regular rate. Character length and limitations: no limit	 
	 */ 
	private String Recurrences;

	/**
	 * Subscription duration and charges	 
	 */ 
	private List<SubscriptionTermsType> Terms = new ArrayList<SubscriptionTermsType>();

	

	/**
	 * Default Constructor
	 */
	public SubscriptionInfoType (){
	}	

	/**
	 * Getter for SubscriptionID
	 */
	 public String getSubscriptionID() {
	 	return SubscriptionID;
	 }
	 
	/**
	 * Setter for SubscriptionID
	 */
	 public void setSubscriptionID(String SubscriptionID) {
	 	this.SubscriptionID = SubscriptionID;
	 }
	 
	/**
	 * Getter for SubscriptionDate
	 */
	 public String getSubscriptionDate() {
	 	return SubscriptionDate;
	 }
	 
	/**
	 * Setter for SubscriptionDate
	 */
	 public void setSubscriptionDate(String SubscriptionDate) {
	 	this.SubscriptionDate = SubscriptionDate;
	 }
	 
	/**
	 * Getter for EffectiveDate
	 */
	 public String getEffectiveDate() {
	 	return EffectiveDate;
	 }
	 
	/**
	 * Setter for EffectiveDate
	 */
	 public void setEffectiveDate(String EffectiveDate) {
	 	this.EffectiveDate = EffectiveDate;
	 }
	 
	/**
	 * Getter for RetryTime
	 */
	 public String getRetryTime() {
	 	return RetryTime;
	 }
	 
	/**
	 * Setter for RetryTime
	 */
	 public void setRetryTime(String RetryTime) {
	 	this.RetryTime = RetryTime;
	 }
	 
	/**
	 * Getter for Username
	 */
	 public String getUsername() {
	 	return Username;
	 }
	 
	/**
	 * Setter for Username
	 */
	 public void setUsername(String Username) {
	 	this.Username = Username;
	 }
	 
	/**
	 * Getter for Password
	 */
	 public String getPassword() {
	 	return Password;
	 }
	 
	/**
	 * Setter for Password
	 */
	 public void setPassword(String Password) {
	 	this.Password = Password;
	 }
	 
	/**
	 * Getter for Recurrences
	 */
	 public String getRecurrences() {
	 	return Recurrences;
	 }
	 
	/**
	 * Setter for Recurrences
	 */
	 public void setRecurrences(String Recurrences) {
	 	this.Recurrences = Recurrences;
	 }
	 
	/**
	 * Getter for Terms
	 */
	 public List<SubscriptionTermsType> getTerms() {
	 	return Terms;
	 }
	 
	/**
	 * Setter for Terms
	 */
	 public void setTerms(List<SubscriptionTermsType> Terms) {
	 	this.Terms = Terms;
	 }
	 



	private  boolean isWhitespaceNode(Node n) {
		if (n.getNodeType() == Node.TEXT_NODE) {
			String val = n.getNodeValue();
			return val.trim().length() == 0;
		} else if (n.getNodeType() == Node.ELEMENT_NODE ) {
			return (n.getChildNodes().getLength() == 0);
		} else {
			return false;
		}
	}
	
	public SubscriptionInfoType(Node node) throws XPathExpressionException {
		XPathFactory factory = XPathFactory.newInstance();
		XPath xpath = factory.newXPath();
		Node childNode = null;
		NodeList nodeList = null;
		childNode = (Node) xpath.evaluate("SubscriptionID", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.SubscriptionID = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("SubscriptionDate", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.SubscriptionDate = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("EffectiveDate", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.EffectiveDate = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("RetryTime", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.RetryTime = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("Username", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Username = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("Password", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Password = childNode.getTextContent();
		}
	
		childNode = (Node) xpath.evaluate("Recurrences", node, XPathConstants.NODE);
		if (childNode != null && !isWhitespaceNode(childNode)) {
		    this.Recurrences = childNode.getTextContent();
		}
	
        nodeList = (NodeList) xpath.evaluate("Terms", node, XPathConstants.NODESET);
		if (nodeList != null && nodeList.getLength() > 0) {
			for(int i=0; i < nodeList.getLength(); i++) {
				Node subNode = nodeList.item(i);
				this.Terms.add(new SubscriptionTermsType(subNode));
			}
		}
	}
 
}